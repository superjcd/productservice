// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_CreateProduct_FullMethodName                  = "/superjcd.productservice.v1.ProductService/CreateProduct"
	ProductService_ListProduct_FullMethodName                    = "/superjcd.productservice.v1.ProductService/ListProduct"
	ProductService_UpdateProduct_FullMethodName                  = "/superjcd.productservice.v1.ProductService/UpdateProduct"
	ProductService_DeleteProduct_FullMethodName                  = "/superjcd.productservice.v1.ProductService/DeleteProduct"
	ProductService_AppendAmzProductActiveDetail_FullMethodName   = "/superjcd.productservice.v1.ProductService/AppendAmzProductActiveDetail"
	ProductService_DeleteAmzProductActiveDetail_FullMethodName   = "/superjcd.productservice.v1.ProductService/DeleteAmzProductActiveDetail"
	ProductService_AppendAmzProductInactiveDetail_FullMethodName = "/superjcd.productservice.v1.ProductService/AppendAmzProductInactiveDetail"
	ProductService_DeleteAmzProductInactiveDetail_FullMethodName = "/superjcd.productservice.v1.ProductService/DeleteAmzProductInactiveDetail"
	ProductService_AppendProductChanges_FullMethodName           = "/superjcd.productservice.v1.ProductService/AppendProductChanges"
	ProductService_ListProductChanges_FullMethodName             = "/superjcd.productservice.v1.ProductService/ListProductChanges"
	ProductService_DeleteProductChanges_FullMethodName           = "/superjcd.productservice.v1.ProductService/DeleteProductChanges"
	ProductService_GetAmzProductLatestInfo_FullMethodName        = "/superjcd.productservice.v1.ProductService/GetAmzProductLatestInfo"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// todo : create multiple
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	// TODO: append multiple
	AppendAmzProductActiveDetail(ctx context.Context, in *AppendAmzProductActiveDetailRequest, opts ...grpc.CallOption) (*AppendAmzProductActiveDetailResponse, error)
	DeleteAmzProductActiveDetail(ctx context.Context, in *DeleteAmzProductActiveDetailRequest, opts ...grpc.CallOption) (*DeleteAmzProductActiveDetailResponse, error)
	AppendAmzProductInactiveDetail(ctx context.Context, in *AppendAmzProductInactiveDetailRequest, opts ...grpc.CallOption) (*AppendAmzProductInactiveDetailResponse, error)
	DeleteAmzProductInactiveDetail(ctx context.Context, in *DeleteAmzProductInactiveDetailRequest, opts ...grpc.CallOption) (*DeleteAmzProductInactiveDetailResponse, error)
	AppendProductChanges(ctx context.Context, in *AppendProductChangesRequest, opts ...grpc.CallOption) (*AppendProductChangesResponse, error)
	ListProductChanges(ctx context.Context, in *ListProductChangesRequest, opts ...grpc.CallOption) (*ListProductChangesResponse, error)
	DeleteProductChanges(ctx context.Context, in *DeleteProductChangesRequest, opts ...grpc.CallOption) (*DeleteProductChangesResponse, error)
	// 获取详情；TODO: 获取某个字段的连续变动信息
	GetAmzProductLatestInfo(ctx context.Context, in *GetAmzProductLatestInfoRequest, opts ...grpc.CallOption) (*GetAmzProductLatestInfoResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductResponse, error) {
	out := new(ListProductResponse)
	err := c.cc.Invoke(ctx, ProductService_ListProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, ProductService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AppendAmzProductActiveDetail(ctx context.Context, in *AppendAmzProductActiveDetailRequest, opts ...grpc.CallOption) (*AppendAmzProductActiveDetailResponse, error) {
	out := new(AppendAmzProductActiveDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_AppendAmzProductActiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAmzProductActiveDetail(ctx context.Context, in *DeleteAmzProductActiveDetailRequest, opts ...grpc.CallOption) (*DeleteAmzProductActiveDetailResponse, error) {
	out := new(DeleteAmzProductActiveDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteAmzProductActiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AppendAmzProductInactiveDetail(ctx context.Context, in *AppendAmzProductInactiveDetailRequest, opts ...grpc.CallOption) (*AppendAmzProductInactiveDetailResponse, error) {
	out := new(AppendAmzProductInactiveDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_AppendAmzProductInactiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAmzProductInactiveDetail(ctx context.Context, in *DeleteAmzProductInactiveDetailRequest, opts ...grpc.CallOption) (*DeleteAmzProductInactiveDetailResponse, error) {
	out := new(DeleteAmzProductInactiveDetailResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteAmzProductInactiveDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) AppendProductChanges(ctx context.Context, in *AppendProductChangesRequest, opts ...grpc.CallOption) (*AppendProductChangesResponse, error) {
	out := new(AppendProductChangesResponse)
	err := c.cc.Invoke(ctx, ProductService_AppendProductChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListProductChanges(ctx context.Context, in *ListProductChangesRequest, opts ...grpc.CallOption) (*ListProductChangesResponse, error) {
	out := new(ListProductChangesResponse)
	err := c.cc.Invoke(ctx, ProductService_ListProductChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteProductChanges(ctx context.Context, in *DeleteProductChangesRequest, opts ...grpc.CallOption) (*DeleteProductChangesResponse, error) {
	out := new(DeleteProductChangesResponse)
	err := c.cc.Invoke(ctx, ProductService_DeleteProductChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAmzProductLatestInfo(ctx context.Context, in *GetAmzProductLatestInfoRequest, opts ...grpc.CallOption) (*GetAmzProductLatestInfoResponse, error) {
	out := new(GetAmzProductLatestInfoResponse)
	err := c.cc.Invoke(ctx, ProductService_GetAmzProductLatestInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// todo : create multiple
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	// TODO: append multiple
	AppendAmzProductActiveDetail(context.Context, *AppendAmzProductActiveDetailRequest) (*AppendAmzProductActiveDetailResponse, error)
	DeleteAmzProductActiveDetail(context.Context, *DeleteAmzProductActiveDetailRequest) (*DeleteAmzProductActiveDetailResponse, error)
	AppendAmzProductInactiveDetail(context.Context, *AppendAmzProductInactiveDetailRequest) (*AppendAmzProductInactiveDetailResponse, error)
	DeleteAmzProductInactiveDetail(context.Context, *DeleteAmzProductInactiveDetailRequest) (*DeleteAmzProductInactiveDetailResponse, error)
	AppendProductChanges(context.Context, *AppendProductChangesRequest) (*AppendProductChangesResponse, error)
	ListProductChanges(context.Context, *ListProductChangesRequest) (*ListProductChangesResponse, error)
	DeleteProductChanges(context.Context, *DeleteProductChangesRequest) (*DeleteProductChangesResponse, error)
	// 获取详情；TODO: 获取某个字段的连续变动信息
	GetAmzProductLatestInfo(context.Context, *GetAmzProductLatestInfoRequest) (*GetAmzProductLatestInfoResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServiceServer) ListProduct(context.Context, *ListProductRequest) (*ListProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedProductServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductServiceServer) AppendAmzProductActiveDetail(context.Context, *AppendAmzProductActiveDetailRequest) (*AppendAmzProductActiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendAmzProductActiveDetail not implemented")
}
func (UnimplementedProductServiceServer) DeleteAmzProductActiveDetail(context.Context, *DeleteAmzProductActiveDetailRequest) (*DeleteAmzProductActiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAmzProductActiveDetail not implemented")
}
func (UnimplementedProductServiceServer) AppendAmzProductInactiveDetail(context.Context, *AppendAmzProductInactiveDetailRequest) (*AppendAmzProductInactiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendAmzProductInactiveDetail not implemented")
}
func (UnimplementedProductServiceServer) DeleteAmzProductInactiveDetail(context.Context, *DeleteAmzProductInactiveDetailRequest) (*DeleteAmzProductInactiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAmzProductInactiveDetail not implemented")
}
func (UnimplementedProductServiceServer) AppendProductChanges(context.Context, *AppendProductChangesRequest) (*AppendProductChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendProductChanges not implemented")
}
func (UnimplementedProductServiceServer) ListProductChanges(context.Context, *ListProductChangesRequest) (*ListProductChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductChanges not implemented")
}
func (UnimplementedProductServiceServer) DeleteProductChanges(context.Context, *DeleteProductChangesRequest) (*DeleteProductChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductChanges not implemented")
}
func (UnimplementedProductServiceServer) GetAmzProductLatestInfo(context.Context, *GetAmzProductLatestInfoRequest) (*GetAmzProductLatestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmzProductLatestInfo not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProduct(ctx, req.(*ListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AppendAmzProductActiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendAmzProductActiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AppendAmzProductActiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AppendAmzProductActiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AppendAmzProductActiveDetail(ctx, req.(*AppendAmzProductActiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAmzProductActiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAmzProductActiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAmzProductActiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAmzProductActiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAmzProductActiveDetail(ctx, req.(*DeleteAmzProductActiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AppendAmzProductInactiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendAmzProductInactiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AppendAmzProductInactiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AppendAmzProductInactiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AppendAmzProductInactiveDetail(ctx, req.(*AppendAmzProductInactiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAmzProductInactiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAmzProductInactiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAmzProductInactiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteAmzProductInactiveDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAmzProductInactiveDetail(ctx, req.(*DeleteAmzProductInactiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_AppendProductChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendProductChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).AppendProductChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_AppendProductChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).AppendProductChanges(ctx, req.(*AppendProductChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListProductChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListProductChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListProductChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListProductChanges(ctx, req.(*ListProductChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteProductChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteProductChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_DeleteProductChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteProductChanges(ctx, req.(*DeleteProductChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAmzProductLatestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmzProductLatestInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAmzProductLatestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetAmzProductLatestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAmzProductLatestInfo(ctx, req.(*GetAmzProductLatestInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superjcd.productservice.v1.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductService_CreateProduct_Handler,
		},
		{
			MethodName: "ListProduct",
			Handler:    _ProductService_ListProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductService_DeleteProduct_Handler,
		},
		{
			MethodName: "AppendAmzProductActiveDetail",
			Handler:    _ProductService_AppendAmzProductActiveDetail_Handler,
		},
		{
			MethodName: "DeleteAmzProductActiveDetail",
			Handler:    _ProductService_DeleteAmzProductActiveDetail_Handler,
		},
		{
			MethodName: "AppendAmzProductInactiveDetail",
			Handler:    _ProductService_AppendAmzProductInactiveDetail_Handler,
		},
		{
			MethodName: "DeleteAmzProductInactiveDetail",
			Handler:    _ProductService_DeleteAmzProductInactiveDetail_Handler,
		},
		{
			MethodName: "AppendProductChanges",
			Handler:    _ProductService_AppendProductChanges_Handler,
		},
		{
			MethodName: "ListProductChanges",
			Handler:    _ProductService_ListProductChanges_Handler,
		},
		{
			MethodName: "DeleteProductChanges",
			Handler:    _ProductService_DeleteProductChanges_Handler,
		},
		{
			MethodName: "GetAmzProductLatestInfo",
			Handler:    _ProductService_GetAmzProductLatestInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
